"use strict";(self.webpackChunkwebsite_2=self.webpackChunkwebsite_2||[]).push([[339],{4750:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"examples/single_task_worker_with_skald_node","title":"Skald Node","description":"\u672c\u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u5728 Skalds \u6846\u67b6\u4e0b\uff0c\u900f\u904e Kafka \u767c\u9001\u4efb\u52d9\u7d66\u4ee5 Node \u6a21\u5f0f\u904b\u884c\u7684 Skald\uff0c\u4e26\u7531\u8a3b\u518a\u7684 TaskWorker \u57f7\u884c\u3002","source":"@site/docs/examples/single_task_worker_with_skald_node.md","sourceDirName":"examples","slug":"/examples/single_task_worker_with_skald_node","permalink":"/Skalds/docs/examples/single_task_worker_with_skald_node","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"quickstartSidebar","previous":{"title":"\u7bc4\u4f8b","permalink":"/Skalds/docs/examples"},"next":{"title":"\u66f4\u65b0 Attachments \u4e26\u900f\u904e Kafka \u767c\u5e03\u7d66 Skald \u7bc4\u4f8b","permalink":"/Skalds/docs/examples/update_task_worker_with_skald_node"}}');var a=r(5813),o=r(9863);const l={},i="Skald Node",d={},t=[{value:"1. \u5b9a\u7fa9 TaskWorker\uff08\u5efa\u8b70\u53ef\u7368\u7acb\u904b\u884c\uff09",id:"1-\u5b9a\u7fa9-taskworker\u5efa\u8b70\u53ef\u7368\u7acb\u904b\u884c",level:2},{value:"2. \u555f\u52d5 Node \u6a21\u5f0f Skald",id:"2-\u555f\u52d5-node-\u6a21\u5f0f-skald",level:2},{value:"3. \u900f\u904e Kafka \u767c\u9001\u4efb\u52d9",id:"3-\u900f\u904e-kafka-\u767c\u9001\u4efb\u52d9",level:2},{value:"4. \u57f7\u884c\u6d41\u7a0b\u8207\u6ce8\u610f\u4e8b\u9805",id:"4-\u57f7\u884c\u6d41\u7a0b\u8207\u6ce8\u610f\u4e8b\u9805",level:2},{value:"5. \u5ef6\u4f38\u95b1\u8b80",id:"5-\u5ef6\u4f38\u95b1\u8b80",level:2}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"skald-node",children:"Skald Node"})}),"\n",(0,a.jsxs)(n.p,{children:["\u672c\u7bc4\u4f8b\u5c55\u793a\u5982\u4f55\u5728 Skalds \u6846\u67b6\u4e0b\uff0c\u900f\u904e Kafka \u767c\u9001\u4efb\u52d9\u7d66\u4ee5 Node \u6a21\u5f0f\u904b\u884c\u7684 Skald\uff0c\u4e26\u7531\u8a3b\u518a\u7684 TaskWorker \u57f7\u884c\u3002",(0,a.jsx)(n.br,{}),"\n","\u5b8c\u6574\u539f\u59cb\u78bc\u53c3\u8003\uff1a",(0,a.jsx)(n.a,{href:"https://github.com/JiHungLin/Skalds/tree/main/examples/single_task_worker_with_skald_node",children:"GitHub \u7bc4\u4f8b\u7a0b\u5f0f"})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"1-\u5b9a\u7fa9-taskworker\u5efa\u8b70\u53ef\u7368\u7acb\u904b\u884c",children:"1. \u5b9a\u7fa9 TaskWorker\uff08\u5efa\u8b70\u53ef\u7368\u7acb\u904b\u884c\uff09"}),"\n",(0,a.jsx)(n.admonition,{title:"\u91cd\u9ede",type:"tip",children:(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsxs)(n.strong,{children:["\u81ea\u8a02\u7684 DataModel \u5fc5\u9808\u7e7c\u627f pydantic \u7684 ",(0,a.jsx)(n.code,{children:"BaseModel"}),"\u3002"]})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsxs)(n.strong,{children:["\u81ea\u8a02\u7684 TaskWorker \u5fc5\u9808\u7e7c\u627f Skalds \u7684 ",(0,a.jsx)(n.code,{children:"BaseTaskWorker"}),"\uff0c\u4e26\u5c07\u81ea\u8a02\u7684 DataModel \u4f5c\u70ba\u6cdb\u578b\u6307\u5b9a\u3002"]})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsxs)(n.strong,{children:["\u6839\u64da\u4e0d\u540c\u751f\u547d\u9031\u671f\uff0c\u8acb\u4f7f\u7528\u5c0d\u61c9\u7684 Decorator\uff08",(0,a.jsx)(n.code,{children:"run_before_handler"}),", ",(0,a.jsx)(n.code,{children:"run_main_handler"}),", ",(0,a.jsx)(n.code,{children:"run_after_handler"}),", ",(0,a.jsx)(n.code,{children:"update_event_handler"}),"\uff09\u4f86\u81ea\u8a02\u908f\u8f2f\u3002"]})}),"\n"]})}),"\n",(0,a.jsxs)(n.p,{children:["\u8207 Edge \u6a21\u5f0f\u76f8\u540c\uff0cTaskWorker \u5efa\u8b70\u52a0\u4e0a ",(0,a.jsx)(n.code,{children:'if __name__ == "__main__"'}),"\uff0c\u65b9\u4fbf\u55ae\u7368\u6e2c\u8a66\u3002"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"my_simple_worker.py"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from skalds.worker.baseclass import BaseTaskWorker, run_before_handler, run_main_handler\nfrom skalds.utils.logging import logger\nfrom pydantic import BaseModel, Field, ConfigDict\nimport time\n\n# 1. \u81ea\u8a02\u7684 DataModel \u5fc5\u9808\u7e7c\u627f pydantic \u7684 BaseModel\nclass MySimpleDataModel(BaseModel):\n    rtsp_url: str = Field(..., description="RTSP stream URL", alias="rtspUrl")\n    fix_frame: int = Field(..., description="Fix frame number", alias="fixFrame")\n    model_config = ConfigDict(\n        populate_by_name=True,\n        use_enum_values=True\n    )\n\n# 2. \u81ea\u8a02\u7684 TaskWorker \u5fc5\u9808\u7e7c\u627f BaseTaskWorker\uff0c\u4e26\u5c07 DataModel \u4f5c\u70ba\u6cdb\u578b\u6307\u5b9a\nclass MySimpleWorker(BaseTaskWorker[MySimpleDataModel]):\n    def initialize(self, data: MySimpleDataModel) -> None:\n        self.rtsp_url = data.rtsp_url\n        self.fix_frame = data.fix_frame\n\n    # 3. \u4f9d\u7167\u4e0d\u540c\u751f\u547d\u9031\u671f\uff0c\u4f7f\u7528\u5c0d\u61c9\u7684 Decorator \u4f86\u81ea\u8a02\u908f\u8f2f\n    @run_before_handler\n    def before_run(self) -> None:\n        logger.info(f"Starting MyWorker with RTSP URL: {self.rtsp_url}")\n\n    @run_main_handler\n    def main_run(self) -> None:\n        for _ in range(30):\n            logger.info(f"Running main logic for MyWorker")\n            logger.info(f"RTSP URL: {self.rtsp_url}, Fix Frame: {self.fix_frame}")\n            time.sleep(1)\n\nif __name__ == "__main__":\n    my_data = MySimpleDataModel(rtsp_url="rtsp://example.com/stream", fix_frame=10)\n    my_worker = MySimpleWorker()\n    my_worker.initialize(my_data)\n    my_worker.start()\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"\u88dc\u5145\u8aaa\u660e\uff1a"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\u4e0a\u8ff0\u7bc4\u4f8b\u4e2d\uff0c",(0,a.jsx)(n.code,{children:"MySimpleDataModel"})," \u5fc5\u9808\u7e7c\u627f\u81ea ",(0,a.jsx)(n.code,{children:"BaseModel"}),"\uff0c\u4ee5\u78ba\u4fdd\u8cc7\u6599\u9a57\u8b49\u8207\u578b\u5225\u63d0\u793a\u3002"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"MySimpleWorker"})," \u5fc5\u9808\u7e7c\u627f\u81ea ",(0,a.jsx)(n.code,{children:"BaseTaskWorker"}),"\uff0c\u4e26\u4ee5\u6cdb\u578b\u65b9\u5f0f\u6307\u5b9a\u5c0d\u61c9\u7684 DataModel\u3002"]}),"\n",(0,a.jsxs)(n.li,{children:["\u4f9d\u7167\u4e0d\u540c\u751f\u547d\u9031\u671f\uff0c\u8acb\u4f7f\u7528\u5c0d\u61c9\u7684 Decorator\uff08\u5982 ",(0,a.jsx)(n.code,{children:"@run_before_handler"}),", ",(0,a.jsx)(n.code,{children:"@run_main_handler"}),"\uff09\u4f86\u81ea\u8a02\u57f7\u884c\u908f\u8f2f\u3002"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"\u8aaa\u660e\uff1a"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u53ef\u76f4\u63a5\u57f7\u884c\u672c\u6a94\u6848\uff0c\u55ae\u7368\u6e2c\u8a66 Worker \u884c\u70ba\u3002"}),"\n",(0,a.jsx)(n.li,{children:"\u5be6\u969b\u904b\u884c\u6642\uff0cSkalds \u6703\u81ea\u52d5\u6ce8\u5165\u4efb\u52d9\u53c3\u6578\u3002"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"2-\u555f\u52d5-node-\u6a21\u5f0f-skald",children:"2. \u555f\u52d5 Node \u6a21\u5f0f Skald"}),"\n",(0,a.jsx)(n.p,{children:"Node \u6a21\u5f0f\u9069\u5408\u7531\u5916\u90e8\uff08\u5982 Controller \u6216\u8173\u672c\uff09\u900f\u904e Kafka \u6307\u6d3e\u4efb\u52d9\u3002"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"skald_node.py"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from skalds import Skald\nfrom skalds.config.skald_config import SkaldConfig\nfrom my_simple_worker import MySimpleWorker\n\nconfig = SkaldConfig(\n    skald_mode="node",  # \u5fc5\u9808\u8a2d\u70ba "node"\n    skald_id="skald_123", # \u7bc0\u9ede\u552f\u4e00\u8b58\u5225\u78bc\uff0c\u82e5\u7701\u7565\u5247\u81ea\u52d5\u7522\u751f\n    log_split_with_worker_id=True,\n    log_level="DEBUG",\n    redis_host="localhost",\n    redis_port=6379,\n    kafka_host="127.0.0.1",\n    kafka_port=9092,\n    mongo_host="mongodb://root:root@localhost:27017/",\n)\n\napp = Skald(config)\napp.register_task_worker(MySimpleWorker)\n\nif __name__ == "__main__":\n    app.run()\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"\u8aaa\u660e\uff1a"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'skald_mode="node"'})," \u5fc5\u9808\uff0c\u4ee3\u8868\u672c\u7bc0\u9ede\u7531\u5916\u90e8\u6307\u6d3e\u4efb\u52d9\u3002"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"skald_id"})," \u5efa\u8b70\u660e\u78ba\u6307\u5b9a\uff0c\u4fbf\u65bc\u4efb\u52d9\u5206\u914d\u8207\u8ffd\u8e64\u3002"]}),"\n",(0,a.jsx)(n.li,{children:"\u9700\u6b63\u78ba\u8a2d\u5b9a Kafka\u3001MongoDB\u3001Redis \u7b49\u670d\u52d9\u53c3\u6578\u3002"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"3-\u900f\u904e-kafka-\u767c\u9001\u4efb\u52d9",children:"3. \u900f\u904e Kafka \u767c\u9001\u4efb\u52d9"}),"\n",(0,a.jsx)(n.p,{children:"\u53ef\u7528\u8173\u672c\u5c07\u4efb\u52d9\u8cc7\u6599\u5beb\u5165 MongoDB\uff0c\u4e26\u900f\u904e Kafka \u767c\u9001\u4efb\u52d9\u4e8b\u4ef6\u7d66 Node\u3002"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"create_task_script.py"})})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from skalds.proxy.kafka import KafkaConfig, KafkaProxy, KafkaTopic\nfrom my_simple_worker import MySimpleDataModel, MySimpleWorker\nfrom skalds.model.task import Task\nfrom skalds.model.event import TaskEvent\nfrom skalds.proxy.mongo import MongoConfig, MongoProxy\nfrom skalds.repository.repository import TaskRepository\n\n# \u5efa\u7acb Kafka \u4ee3\u7406\nkafka_config = KafkaConfig(\n    host="127.0.0.1",\n    port=9092,\n)\nkafka_proxy = KafkaProxy(kafka_config)\n\n# \u5efa\u7acb MongoDB \u4ee3\u7406\nmongo_config = MongoConfig(\n    host="mongodb://root:root@localhost:27017/",\n)\nmongo_proxy = MongoProxy(mongo_config=mongo_config)\ntask_rep = TaskRepository(mongo_proxy)\n\n# \u5efa\u7acb Task \u4e8b\u4ef6\ntask_attachment = MySimpleDataModel(\n    rtspUrl="rtsp://example.com/stream",\n    fixFrame=10\n)\ntask = Task(\n    id="task_123",\n    class_name=MySimpleWorker.__name__,\n    source="TestingScript",\n    attachments=task_attachment\n)\n\n# \u5beb\u5165 MongoDB\ntry:\n    task_rep.create_task(task)\nexcept Exception as e:\n    print(e)\n\n# \u66f4\u65b0 executor\nskald_id = "skald_123"\ntask_rep.update_executor(task.id, skald_id)\n\n# \u5efa\u7acb Task \u4e8b\u4ef6\ntask_event = TaskEvent(task_ids=[task.id])\n\n# \u767c\u9001 Task \u4e8b\u4ef6\nkafka_proxy.produce(KafkaTopic.TASK_ASSIGN, key=task.id, value=task_event.model_dump_json())\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"\u8aaa\u660e\uff1a"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\u5148\u5c07\u4efb\u52d9\u8cc7\u6599\u5beb\u5165 MongoDB\uff0c\u518d\u6307\u5b9a\u76ee\u6a19 Node\uff08",(0,a.jsx)(n.code,{children:"skald_id"}),"\uff09\u3002"]}),"\n",(0,a.jsxs)(n.li,{children:["\u900f\u904e Kafka \u767c\u9001 ",(0,a.jsx)(n.code,{children:"TASK_ASSIGN"})," \u4e8b\u4ef6\uff0cNode \u7aef Skald \u6703\u81ea\u52d5\u63a5\u6536\u4e26\u57f7\u884c\u4efb\u52d9\u3002"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"4-\u57f7\u884c\u6d41\u7a0b\u8207\u6ce8\u610f\u4e8b\u9805",children:"4. \u57f7\u884c\u6d41\u7a0b\u8207\u6ce8\u610f\u4e8b\u9805"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"\u555f\u52d5 Kafka\u3001MongoDB\u3001Redis \u7b49\u5fc5\u8981\u670d\u52d9\u3002"}),"\n",(0,a.jsxs)(n.li,{children:["\u555f\u52d5 Node \u7bc0\u9ede\uff1a","\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python skald_node.py\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\u57f7\u884c\u4efb\u52d9\u767c\u9001\u8173\u672c\uff1a","\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"python create_task_script.py\n"})}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"\u89c0\u5bdf Node \u7bc0\u9ede\u7d42\u7aef\u6a5f\uff0c\u61c9\u53ef\u770b\u5230 Worker \u57f7\u884c\u65e5\u8a8c\u3002"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"\u6ce8\u610f\u4e8b\u9805\uff1a"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"skald_id"})," \u5fc5\u9808\u8207\u8173\u672c\u4e2d\u6307\u5b9a\u7684 executor \u4e00\u81f4\uff0c\u5426\u5247\u4efb\u52d9\u4e0d\u6703\u88ab\u6b63\u78ba\u5206\u914d\u3002"]}),"\n",(0,a.jsx)(n.li,{children:"\u4efb\u52d9\u8cc7\u6599\u9700\u5148\u5beb\u5165 MongoDB\uff0cSkald Node \u6703\u81ea\u52d5\u67e5\u8a62\u4e26\u57f7\u884c\u3002"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"5-\u5ef6\u4f38\u95b1\u8b80",children:"5. \u5ef6\u4f38\u95b1\u8b80"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/JiHungLin/Skalds/tree/main/examples/single_task_worker_with_skald_node",children:"\u672c\u7bc4\u4f8b\u5b8c\u6574\u539f\u59cb\u78bc"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/Skalds/docs/quickstart",children:"\u5feb\u901f\u5165\u9580\uff1aEdge \u6a21\u5f0f"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/Skalds/docs/intro",children:"Skalds \u67b6\u69cb\u8207\u8a2d\u8a08\u7406\u5ff5"})}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.p,{children:"Skalds \u8b93\u4f60\u8f15\u9b06\u4e32\u63a5 Kafka \u4efb\u52d9\u6d41\uff0c\u6253\u9020\u9ad8\u6548\u80fd\u3001\u53ef\u64f4\u5c55\u7684\u5206\u6563\u5f0f\u4efb\u52d9\u5e73\u53f0\uff01"})]})}function k(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},9863:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>i});var s=r(9729);const a={},o=s.createContext(a);function l(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);