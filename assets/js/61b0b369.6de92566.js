"use strict";(self.webpackChunkwebsite_2=self.webpackChunkwebsite_2||[]).push([[452],{2689:(e,n,a)=>{a.r(n),a.d(n,{default:()=>i});var r=a(9729),t=a(6439),s=a(5813);const o='\nSkalds: Distributed Event-Driven Task Orchestration Framework \u2014 LLM Collaboration Prompt\n\n[Project Positioning & Goals]\nSkalds is an event-driven, modular, distributed task scheduling and execution system inspired by Norse skalds. It is designed for high-concurrency, scalable backend task management, suitable for AI computation, image analysis, real-time data processing, and more. Skalds emphasizes loose coupling, flexible resource scheduling, comprehensive monitoring, and type safety.\n\n[Core Architecture & Modules]\n- System Controller: Core for API, monitoring, scheduling, heartbeat, and state management\n- Monitor: Performance monitoring, resource analysis, task tracking, alerting\n- Dispatcher: Intelligent task assignment, dynamic load balancing\n- Skald (Task Generator): Task creation and scheduling, supports Edge/Node modes\n- Task Worker: Independent process for task execution, supports multi-stage, retry, and dynamic parameter hot update\n- Event Queue: Kafka-based event queue for efficient Pub/Sub communication\n- Cache Memory: Redis cache for high-frequency data and fine-grained TTL control\n- Disk Storage: MongoDB for persistent storage, supports query, sharding, and fault tolerance\n\n[Design Principles]\n- High concurrency & performance: Supports massive parallel tasks and dynamic resource scheduling\n- Modularity & extensibility: Each module is independent, pluggable, and easy to extend/maintain\n- Event-driven & loose coupling: Uses Pub/Sub for flexible module interaction\n- Type safety: All data structures use Pydantic BaseModel for strict typing\n\n[Development Guidelines & Data Structures]\n1. TaskWorker must inherit from BaseTaskWorker[T], where T is a Pydantic BaseModel. All attachments/event data must be type-safe.\n2. Lifecycle hooks (Decorators):\n   - @run_before_handler: Pre-execution hook\n   - @run_main_handler: Main logic (must be implemented)\n   - @run_after_handler: Post-execution hook\n   - @release_handler: Resource release hook\n   - @update_event_handler: Dynamic parameter hot update\n3. Event flow & data sync:\n   - Task creation, update, and cancellation are all event-driven (Kafka); state/heartbeat/errors are synced to Redis\n   - All event data must conform to the corresponding Pydantic type\n4. YAML configuration (Edge mode):\n   - TaskWorkers:\n       TaskWorker1:\n         attachments:\n           fixFrame: 30\n           rtspUrl: rtsp://192.168.1.1/camera1\n         className: MyWorker\n   - attachments must match the Pydantic fields of the Python class (supports nested structures)\n   - className must be a Python class registered in Skalds\n5. Task data structure (Task):\n   - id: str (unique identifier, matches YAML key)\n   - class_name: str (TaskWorker class name)\n   - attachments: Pydantic BaseModel (init/update parameters)\n   - Other fields: name, description, dependencies, mode, lifecycle_status, priority, timestamps\n\n[Error Handling & Monitoring]\n- On task exception, _error_handler reports the error and pushes a failed heartbeat to Redis\n- All state, heartbeat, and error messages can be queried and alerted by System Controller/Monitor\n- Redis/Kafka connection failures, version mismatches, etc., are all logged in detail\n\n[Example: Custom TaskWorker]\n```python\nfrom skalds.worker.baseclass import BaseTaskWorker, run_before_handler, run_main_handler, update_event_handler\nfrom pydantic import BaseModel, Field, ConfigDict\n\nclass MyDataModel(BaseModel):\n    rtsp_url: str = Field(..., alias="rtspUrl")\n    fix_frame: int = Field(..., alias="fixFrame")\n    model_config = ConfigDict(populate_by_name=True, use_enum_values=True)\n\nclass MyWorker(BaseTaskWorker[MyDataModel]):\n    def initialize(self, data: MyDataModel) -> None:\n        self.rtsp_url = data.rtsp_url\n        self.fix_frame = data.fix_frame\n\n    @run_before_handler\n    def before_run(self) -> None:\n        print(f"Starting MyWorker with RTSP URL: {self.rtsp_url}")\n\n    @run_main_handler\n    def main_run(self) -> None:\n        for _ in range(10):\n            print(f"RTSP URL: {self.rtsp_url}, Fix Frame: {self.fix_frame}")\n\n    @update_event_handler\n    def update_event(self, event_data: MyDataModel) -> None:\n        self.rtsp_url = event_data.rtsp_url\n        self.fix_frame = event_data.fix_frame\n```\n\n[Example: YAML Configuration]\n```yaml\nTaskWorkers:\n  TaskWorker1:\n    attachments:\n      fixFrame: 30\n      rtspUrl: rtsp://192.168.1.1/camera1\n    className: MyWorker\n```\n\n[Example: Launching Skalds]\n```python\nfrom skalds import Skalds\nfrom skalds.config.skald_config import SkaldConfig\nfrom my_worker import MyWorker\n\nconfig = SkaldConfig(\n    skald_mode="edge",  # or "node"\n    yaml_file="all_workers.yml",\n    redis_host="localhost",\n    kafka_host="127.0.0.1",\n    mongo_host="mongodb://root:root@localhost:27017/"\n)\n\napp = Skalds(config)\napp.register_task_worker(MyWorker)\napp.run()\n```\n\n[Best Practices]\n- Keys in attachments must match the Pydantic fields (or alias)\n- className must be a Python class registered in Skalds\n- All event data, task state, heartbeat, and errors must be type-safe and synced in real time\n- Do NOT invent custom data structures; always follow official types and interfaces\n- It is recommended to version-control YAML configs and code for traceability\n\n';function i(){const e=(0,r.useRef)(null),[n,a]=(0,r.useState)(!1);return(0,s.jsx)(t.A,{title:"Skalds Prompt",children:(0,s.jsxs)("div",{style:{maxWidth:900,margin:"0 auto",padding:"2rem 1rem"},children:[(0,s.jsx)("h1",{children:"Skalds Prompt"}),(0,s.jsxs)("div",{style:{display:"flex",alignItems:"center",gap:"1rem",marginBottom:"1rem"},children:[(0,s.jsx)("button",{onClick:()=>{e.current&&(navigator.clipboard.writeText(o),a(!0),setTimeout(()=>a(!1),1500))},style:{padding:"0.5rem 1.2rem",fontSize:"1rem",cursor:"pointer",background:"#3578e5",color:"white",border:"none",borderRadius:4},children:"Copy All"}),n&&(0,s.jsx)("span",{style:{color:"#3578e5",fontWeight:600,fontSize:"1rem"},children:"Copied!"})]}),(0,s.jsx)("pre",{ref:e,style:{background:"#222",color:"#fff",padding:"1.5rem",borderRadius:8,overflowX:"auto",fontSize:"0.95rem",lineHeight:1.5,maxHeight:600},children:o})]})})}}}]);